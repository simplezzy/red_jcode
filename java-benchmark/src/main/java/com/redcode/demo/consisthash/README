普通余数Hash,均匀分布，但伸缩性较差，对于服务器的上线下线命中率不高---
解决----->1、访问量低谷、深夜重启扩容；模拟请求、预热缓存，使得

一致性Hash算法：
 实现：一致性hash环的数据结构实现key到缓存服务器的Hash映射
    1、构造长度2(32)的整数环，根据节点名的hash值将其服务器放置在Hash环上
    2、根据数据hash值顺时针找到距离其最近的服务器节点，完成Key到服务器的映射查找

  1、构造出一个长度为232的整数环，数据结构的选取：红黑树
     a.排序 + list  O(nlogn)
     b.遍历+list O(n)  计算差值最小的
     c.二叉查找树--红黑树 O(logn)  TreeMap/TreeSet

  2、为了节点的均匀分布，服务器节点Hash值需要重新计算
     重新计算Hash值的算法有很多，比如CRC32_HASH、FNV1_32_HASH、KETAMA_HASH等，其中KETAMA_HASH是默认的MemCache推荐的一致性Hash算法


  问题：尽管增强了系统的伸缩性，但有可能会导致分布不均匀，负载不均
  解决：引入虚拟节点：将一个物理节点拆分为多个虚拟节点，并且同一个物理节点的虚拟节点尽量均匀分布在Hash环上
       10--->每台增加100-200个虚拟节点
  考虑：一个真实节点如何对应多个虚拟节点
       虚拟节点如何找到原来的真实节点
       每个真实结点后面根据虚拟节点加上后缀再取Hash  192.168.0.0:111″就把它变成”192.168.0.0:111&&VN0″到”192.168.0.0:111&&VN4




