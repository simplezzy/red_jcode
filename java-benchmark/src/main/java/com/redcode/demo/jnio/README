JAVA NIO
  1、NIO 和阻塞IO
     阻塞I/O的通信模型：一直阻塞到有客户端连接才会返回，每个客户端连接过来后，服务端都会启动一个线程去处理该客户端的请求。缺点：
        a. 当客户端多时，会创建大量的处理线程, 且每个线程都要占用栈空间和一些CPU时间
        b. 阻塞可能带来频繁的上下文切换，且大部分上下文切换可能是无意义的。

      java NIO的工作原理:
        采用了双向通道（channel）进行数据传输，而不是单向的流（stream）
        a. 由一个专门的线程来处理所有的 IO 事件，并负责分发
        b. 事件驱动机制：事件到的时候触发，而不是同步的去监视事件。
        c. 线程通讯：线程之间通过 wait,notify 等方式通讯。保证每次上下文切换都是有意义的。减少无谓的线程切换。

         服务端和客户端各自维护一个管理通道的对象，我们称之为selector，该对象能检测一个或多个通道 (channel) 上的事件。通常处理线程会轮询
       访问该对象，如果访问时，发现有感兴趣的事件到达，则处理；否则一直阻塞到感兴趣的事件到达为止

